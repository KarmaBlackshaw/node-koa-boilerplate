// store
const knex = require('@config/knex')
const redis = require('@config/redis')

// utilities
const { makeQuery } = require('@utilities/knex-helper')

// libs
const _isEmpty = require('lodash/isEmpty')
const _isNil = require('lodash/isNil')
const _castArray = require('lodash/castArray')
const _pickBy = require('lodash/pickBy')
const _get = require('lodash/get')

// helpers

module.exports = {
  async list ({
    filter_by: filterBy,
    q,
    page,
    rows,
    sort_by: sortBy,
    sort,
    is_count: isCount,
    date_by: dateBy,
    date_from: dateFrom,
    date_to: dateTo
  } = {}) {
    const filterDictionary = {}

    const sortDictionary = {
      login_id: '{{ pluralSnakeCase name }}.login_id',
      login_name: '{{ pluralSnakeCase name }}.login_name',
      amount: '{{ pluralSnakeCase name }}.amount'
    }

    const dateDictionary = {
      created_at: '{{ pluralSnakeCase name }}.created_at'
    }

    try {
      const list = await knex('{{ pluralSnakeCase name }}')
        .meta({
          ...{ dateBy, dateFrom, dateTo, dateDictionary },
          ...{ sortBy, sort, sortDictionary },
          ...{ page, rows },
          ...{ filterBy, q, filterDictionary },
          isCount
        })
        .modify(knex => {
          if (isCount) {
            knex
              .count({ total: '{{ pluralSnakeCase name }}.id' })
              .first()
          } else {
            knex.select({
              id: '{{ pluralSnakeCase name }}.id',
              login_id: '{{ pluralSnakeCase name }}.login_id',
              login_name: '{{ pluralSnakeCase name }}.login_name',
              amount: '{{ pluralSnakeCase name }}.amount',
              created_at: '{{ pluralSnakeCase name }}.created_at'
            })
          }
        })

      if (isCount) {
        return _get(list, 'total', 0)
      }

      return list
    } catch (error) {
      console.log(error)
      throw error
    }
  },

  async find (conditions) {
    const dictionary = {
      id: '{{ pluralSnakeCase name }}.id',
      type_id: '{{ pluralSnakeCase name }}.type_id',
      name: '{{ pluralSnakeCase name }}.name',
      table: '{{ pluralSnakeCase name }}.table'
    }

    try {
      const data = await knex('{{ pluralSnakeCase name }}')
        .modify(knex => {
          if (_isEmpty(conditions)) {
            knex.whereRaw('1 = 0')
          }

          for (const key in conditions) {
            const curr = conditions[key]

            if (dictionary[key] && !_isNil(curr)) {
              knex.where(dictionary[key], curr)
            }
          }

          if (conditions.is_deleted) {
            knex.whereNotNull('{{ pluralSnakeCase name }}.deleted_at')
          } else {
            knex.whereNull('{{ pluralSnakeCase name }}.deleted_at')
          }
        })
        .select({
          id: '{{ pluralSnakeCase name }}.id',
          type_id: '{{ pluralSnakeCase name }}.type_id',
          name: '{{ pluralSnakeCase name }}.name',
          table: '{{ pluralSnakeCase name }}.table'
        })
        .first()

      return data
    } catch (error) {
      console.log(error)
      throw error
    }
  },

  async store (payload) {
    const fillables = [
      'foo',
      'bar'
    ]

    try {
      const [id] = await knex('{{ pluralSnakeCase name }}')
        .metaInsert(payload, fillables)

      return id
    } catch (error) {
      console.log(error)
      throw error
    }
  },

  async modify (id, payload) {
    try {
      const dictionary = {
        foo: '{{ pluralSnakeCase name }}.foo'
      }

      await knex({ tbl: '{{ pluralSnakeCase name }}' })
        .where('tbl.id', id)
        .metaUpdate(payload, dictionary)
    } catch (error) {
      console.log(error)
      throw error
    }
  }
}
