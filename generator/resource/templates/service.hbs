const knex = require('@config/knex')

const _get = require('lodash/get')
const _first = require('lodash/first')
const _castArray = require('lodash/castArray')

module.exports = {
  async list ({
    query,
    is_count: isCount,
    is_first: isFirst
  } = {}) {
    const fields = {
      id: {
        column: '{{ pluralSnakeCase name }}.id',
        filterable: true,
        sortable: true
      }
    }

    try {
      const list = await knex('{{ pluralSnakeCase name }}')
        .metaQuery(query, fields)
        .modify(function () {
          if (isCount) {
            this
              .count({ total: '{{ pluralSnakeCase name }}.id' })
              .first()
          } else {
            this.select({
              id: '{{ pluralSnakeCase name }}.id'
            })
          }

          if (isFirst) {
            this.limit(1)
          }
        })

      if (isCount) {
        return _get(list, 'total', 0)
      }

      return isFirst ? _first(list) : list
    } catch (error) {
      console.log(error)
      throw error
    }
  },

  async store ({
    body,
    trx = knex
  }) {
    const fields = ['foo']

    try {
      const [id] = await trx('{{ pluralSnakeCase name }}')
        .metaInsert(body, fields)

      return id
    } catch (error) {
      console.log(error)
      throw error
    }
  },

  async modify ({
    keys,
    body,
    trx = knex
  }) {
    try {
      const options = {
        fields: {
          id: 'users.id',
          name: 'users.name',
          username: 'users.username'
        }
      }

      await trx('{{ pluralSnakeCase name }}')
        .metaUpdate(keys, body, options)
    } catch (error) {
      console.log(error)
      throw error
    }
  },

  async delete ({
    ids,
    trx = knex
  }) {
    try {
      await trx('{{ pluralSnakeCase name }}')
        .whereIn('id', _castArray(ids))
        .del()
    } catch (error) {
      console.log(error)
      throw error
    }
  }
}
