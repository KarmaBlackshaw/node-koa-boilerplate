const knex = require('@config/knex')

// libs
const _ = require('lodash')

module.exports = {
  async list ({
    query,
    is_count: isCount,
    is_first: isFirst
  } = {}) {
    const fields = {
      id: {
        column: '{{ pluralSnakeCase name }}.id',
        filterable: true,
        sortable: true
      }
    }

    try {
      const list = await knex('{{ pluralSnakeCase name }}')
        .metaQuery(query, fields)
        .modify(function () {
          if (isCount) {
            this
              .count({ total: '{{ pluralSnakeCase name }}.id' })
              .first()
          } else {
            this.select({
              id: '{{ pluralSnakeCase name }}.id'
            })
          }

          if (isFirst) {
            this.limit(1)
          }
        })

      if (isCount) {
        return _.get(list, 'total', 0)
      }

      return isFirst ? _.first(list) : list
    } catch (error) {
      console.log(error)
      throw error
    }
  },

  async store (payload) {
    const options = {
      fields: ['foo']
    }

    try {
      const [id] = await knex('{{ pluralSnakeCase name }}')
        .metaInsert(payload, options)

      return id
    } catch (error) {
      console.log(error)
      throw error
    }
  },

  async modify (keys, payload) {
    try {
      const options = {
        fields: {
          id: 'users.id',
          name: 'users.name',
          username: 'users.username'
        },
        else: {
          name: 'foo'
        }
      }

      await knex('{{ pluralSnakeCase name }}')
        .metaUpdate(keys, payload, options)
    } catch (error) {
      console.log(error)
      throw error
    }
  },

  async delete (ids) {
    try {
      await knex('{{ pluralSnakeCase name }}')
        .whereIn('id', _.castArray(ids))
        .del()
    } catch (error) {
      console.log(error)
      throw error
    }
  }
}
